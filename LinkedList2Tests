using HomeWork;
using NUnit.Framework;
using System;

namespace Homework2.Tests
{
	[TestFixture]
	public class LinkedList2Tests
	{
		LinkedList lList = new LinkedList();
		[SetUp]
		public void Setup()
		{
			lList.AddLast(10);
			lList.AddLast(12);
			lList.AddLast(15);
			lList.AddLast(-31);
			lList.AddLast(47);

		}

		[TearDown]
		public void AfterTest() { }

		[TestCase(new int[] { 7, 2, 5, 6 }, 11, new int[] { 7, 2, 5, 6, 11 })]
		public void AddLastTest(int[] array, int val, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.AddLast(val);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6 }, new int[] { 11, 5, 3 }, new int[] { 7, 2, 5, 6, 11, 5, 3 })]
		public void AddLast2Test(int[] array, int[] vals, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.AddLast2(vals);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6 }, 11, new int[] { 11, 7, 2, 5, 6 })]
		public void AddFirstTest(int[] array, int val, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.AddFirst(val);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6 }, new int[] { 11, 5, 3 }, new int[] { 11, 5, 3, 7, 2, 5, 6 })]
		public void AddFirst2Test(int[] array, int[] vals, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.AddFirst2(vals);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 10, 12, 15, 17 }, 2, 7, new int[] { 10, 12, 7, 15, 17 })]
		public void AddAtTest(int[] sourceArray, int idx, int val, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			lList.AddAt(idx, val);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}


		[TestCase(new int[] { 10, 12, 15, 17 }, 2, new int[] { 4, 5, 7 }, new int[] { 10, 12, 4, 5, 7, 15, 17 })]
		public void AddAtArrTest(int[] sourceArray, int idx, int[] vals, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			lList.AddAtArr(idx, vals);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}


		[TestCase(new int[] { 7, 2, 5, 6 }, new int[] { 2, 5, 6 })]
		public void RemoveFirstTest(int[] array, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.RemoveFirst();
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6 }, new int[] { 7, 2, 5 })]
		[TestCase(new int[] { 1, 2, 3, 4 }, new int[] { 1, 2, 3 })]
		public void RemoveLastTest(int[] array, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.RemoveLast();
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6 },2, new int[] { 7, 2, 6 })]
		[TestCase(new int[] { 1, 2, 3, 4 },1, new int[] { 1, 3,4 })]
		public void RemoveAtTest(int[] array, int idx, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.RemoveAt(idx);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 1,2,3,2,4 },2, new int[] {1,3,4 })]
		public void RemoveAllTest(int[] array,int val, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.RemoveAll(val);
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 7, 2, 5, 6,8,1 }, new int[] {1,8,6,5,2,7 })]
		public void ReverseTest(int[] array, int[] expectedArr)
		{
			LinkedList2 lList = new LinkedList2(array);
			lList.Reverse();
			Assert.AreEqual(expectedArr, lList.ToArray());
		}

		[TestCase(new int[] { 10, 12, 1 }, 3)]// работает
		public void GetSizeTest(int[] sourceArray, int expected)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			// lList.GetSize();
			Assert.AreEqual(expected, lList.GetSize());
		}



		[TestCase(-31, true)]
		public void ContainsTest(int val, bool expected)
		{
			bool actual = lList.Contains(val);
			Assert.AreEqual(expected, actual);
		}


		[TestCase(new int[] { 10, 12, 15, -31, 47 }, 2, 100)]
		[TestCase(new int[] { 0, 144, 1, 3, 71 }, 4, 44)]
		public void SetTest(int[] sourceArray, int indx, int val)
		{
			int[] expectedArr = sourceArray;
			expectedArr[indx] = val;
			LinkedList2 lList = new LinkedList2(sourceArray);
			lList.Set(indx, val);
			int[] actual = lList.ToArray();
			Assert.AreEqual(expectedArr, actual);
		}

		[TestCase(new int[] { 10, 12, 11, 12, 15 }, 10, 0)]
		[TestCase(new int[] { 10, 12, 11, 12, 15 }, 12, 1)]
		public void IndexOfTest(int[] sourceArray, int val, int expected)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			int actual = lList.IndexOf(val);
			Assert.AreEqual(expected, actual);
		}
		[TestCase(new int[] { 10, 12, 11, 12, 15 }, 10)]
		public void GetFirstTest(int[] sourceArray, int expected)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			int actual = lList.GetFirst();
			Assert.AreEqual(expected, actual);
		}


		[TestCase(new int[] { 10, 12, 11, 12, 15 }, 15)]
		public void GetLastTest(int[] sourceArray, int expected)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			int actual = lList.GetLast();
			Assert.AreEqual(expected, actual);
		}

		[TestCase(new int[] { 10, 12, 11, 12, 15 }, 2, 11)]
		public void GetTest(int[] sourceArray, int idx, int expected)
		{
			LinkedList2 lList = new LinkedList2(sourceArray);
			int actual = lList.Get(idx);
			Assert.AreEqual(expected, actual);
		}
		
	}
}
