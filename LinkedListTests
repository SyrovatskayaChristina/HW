using NUnit.Framework;
using System;

namespace Homework2.Tests
{
    [TestFixture]
    public class LinkedListTests
    {
        LinkedList lList = new LinkedList();
        [SetUp]
        public void Setup()
        {
            lList.AddLast(10);
            lList.AddLast(12);
            lList.AddLast(15);
            lList.AddLast(-31);
            lList.AddLast(47);

        }


        [TestCase(new int[] { 10, 12, 15, 47, 0 }, 3, new int[] { 10, 12, 15, 0 })] //работает
        public void RemoveAtTest(int[] sourceArray, int index, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.RemoveAt(index);
            int[] actual = lList.ToArray();
            Assert.AreEqual(expectedArr, actual);
        }



        [TestCase(new int[] { 10, 12, 1 }, 3)]// работает
        public void GetSizeTest(int[] sourceArray, int expected)
        {
            LinkedList lList = new LinkedList(sourceArray);
            // lList.GetSize();
            Assert.AreEqual(expected, lList.GetSize());
        }



        [TestCase(-31, true)]// работает
        public void ContainsTest(int val, bool expected)
        {
            bool actual = lList.Contains(val);
            Assert.AreEqual(expected, actual);
        }


        [TestCase(new int[] { 10, 12, 15, -31, 47 }, 2, 100)]
        [TestCase(new int[] { 0, 144, 1, 3, 71 }, 4, 44)]
        public void SetTest(int[] sourceArray, int indx, int val)// работает
        {
            int[] expectedArr = sourceArray;
            expectedArr[indx] = val;
            LinkedList lList = new LinkedList(sourceArray);
            lList.Set(indx, val);
            int[] actual = lList.ToArray();
            Assert.AreEqual(expectedArr, actual);
        }



        [TestCase(new int[] { 10, 12, 15, -31, 47 }, 5, new int[] { 5, 10, 12, 15, -31, 47 })]// работает
        public void AddFirstTest(int[] sourceArray, int val, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddFirst(val);
            //int[] actual = lList.ToArray();
            Assert.AreEqual(expectedArr, lList.ToArray());
        }



        [TestCase(new int[] { 10, 12, 15 }, new int[] { 5, 7 }, new int[] { 5, 7, 10, 12, 15 })]
        public void AddFirstMTest(int[] sourceArray, int[] vals, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddFirstM(vals);
            Assert.AreEqual(expectedArr, lList.ToArray());
        }


        [TestCase(new int[] { 10, 12, 15 }, 5, new int[] { 10, 12, 15, 5 })]
        public void AddLastTest(int[] sourceArray, int val, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddLast(val);
            Assert.AreEqual(expectedArr, lList.ToArray());
        }

        [TestCase(new int[] { 10, 12, 15 }, new int[] { 5, 7 }, new int[] { 10, 12, 15, 5, 7 })]
        public void AddLastMTest(int[] sourceArray, int[] vals, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddLastM(vals);
            Assert.AreEqual(expectedArr, lList.ToArray());
        }


        [TestCase(new int[] { 10, 12, 15 },1,7, new int[] { 10, 12, 7, 15 })]
        public void AddAtTest(int[] sourceArray, int idx, int val, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddAt(idx, val);
            Assert.AreEqual(expectedArr, lList.ToArray());
        }

        [TestCase(new int[] { 10, 12, 15 }, 1, new int[] {5,7,9 }, new int[] { 10, 5, 7, 9, 12, 15 })]
        public void AddAt2Test(int[] sourceArray, int idx, int[] vals, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
            lList.AddAt2(idx, vals);
            Assert.AreEqual(expectedArr, lList.ToArray());
        }
        //IndexOf(int val) - вернёт индекс первого найденного элемента, 
        //равного val(или -1, если элементов с таким значением в списке нет)
        
        [TestCase(new int[] { 10, 12, 11, 12, 15 },10,0)]
        [TestCase(new int[] { 10, 12, 11, 12, 15 }, 12, 1)]
        public void IndexOfTest(int[] sourceArray, int val, int expected)
        {
            LinkedList lList = new LinkedList(sourceArray);
            int actual = lList.IndexOf(val);
            Assert.AreEqual(expected, actual);
        }

        [TestCase(new int[] { 10, 12, 11, 12, 15 },10)]
        public void GetFirstTest(int[] sourceArray, int expected)
        {
            LinkedList lList = new LinkedList(sourceArray);
            int actual = lList.GetFirst();
            Assert.AreEqual(expected, actual);
        }


        [TestCase(new int[] { 10, 12, 11, 12, 15 }, 15)]
        public void GetLastTest(int[] sourceArray, int expected)
        {
            LinkedList lList = new LinkedList(sourceArray);
            int actual = lList.GetLast();
            Assert.AreEqual(expected, actual);
        }

        [TestCase(new int[] { 10, 12, 11, 12, 15 }, 2,11)]
        public void GetTest(int[] sourceArray, int idx, int expected)
        {
            LinkedList lList = new LinkedList(sourceArray);
            int actual = lList.Get(idx);
            Assert.AreEqual(expected, actual);
        }

        [TestCase(new int[] { 10, 12, 11, 7, 15 }, new int[] { 15,7, 11, 12, 10 })]
        public void ReverseTest(int[] sourceArray, int[] expectedArr)
        {
            LinkedList lList = new LinkedList(sourceArray);
           lList.Reverse();
           Assert.AreEqual(expectedArr, lList.ToArray());
        }
    }
}

